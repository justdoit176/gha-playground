name: 'GH Release Generator'
description: 'Generates a GitHub release with changelog'

inputs:
  github_token:
    description: 'GitHub token'
    required: true
  tag:
    description: 'The tag to create a release for. If not provided, will be detected from the context.'
    required: false

runs:
  using: "composite"
  steps:
    - name: Determine tag
      id: get_tag
      shell: bash
      run: |
        if [ -n "${{ inputs.tag }}" ]; then
          echo "Using provided tag: ${{ inputs.tag }}"
          echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
        elif [ -n "$GITHUB_REF" ] && [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
          echo "Detected tag from GITHUB_REF: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
        else
          echo "Error: No tag provided and unable to detect from context"
          exit 1
        fi

    - name: Check if release exists
      id: check_release
      shell: bash
      run: |
        TAG_NAME="${{ steps.get_tag.outputs.tag }}"
        RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME"
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ inputs.github_token }}" $RELEASE_URL)
        echo "HTTP Status Code: $RESPONSE"
        if [ "$RESPONSE" = "404" ]; then
          echo "Release does not exist for tag $TAG_NAME."
          echo "release_exists=false" >> $GITHUB_OUTPUT
        elif [ "$RESPONSE" = "200" ]; then
          echo "Release already exists for tag $TAG_NAME."
          echo "release_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Unexpected response code: $RESPONSE"
          exit 1
        fi

    - name: Set env vars
      run: echo "REPO_DIR=${{ github.workspace }}/repo4gitcliff" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository for changelog
      if: steps.check_release.outputs.release_exists == 'false'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: ${{ env.REPO_DIR }}

    - name: Generate changelog
      if: steps.check_release.outputs.release_exists == 'false'
      uses: orhun/git-cliff-action@v4
      with:
        args: --latest --strip header --workdir ${{ env.REPO_DIR }}

    - name: Create GitHub Release
      if: steps.check_release.outputs.release_exists == 'false'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        body: ${{ steps.generate_changelog.outputs.content }}

    - name: Clean up temporary checkout
      if: always()
      shell: bash
      run: rm -rf "${REPO_DIR}"